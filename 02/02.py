import unittest

instructions = '''RLRDDRLLDLRLUDDULLDRUUULDDLRLUDDDLDRRDUDDDLLURDDDLDDDRDURUDRDRRULUUDUDDRRRLRRRRRLRULRLLRULDRUUDRLRRURDDRLRULDLDULLLRULURRUULLRLLDDDDLLDURRUDLDLURDRDRDLUUUDDRDUUDDULLUURRDRLDDULURRRUDLLULULDLLURURUDRRRRUDRLRDLRRLDDRDDLULDLLLURURDUDRRRRUULURLRDULDRLUDRRUDDUULDURUDLDDURRRDLULLUUDRLLDUUDLDRUDDRLLLLLLDUDUDDLRDLRRDRUDDRRRLLRRDLLRLDDURUURRRDDLDUULLDLDLRURDLLLDDRUUDRUDDDDULRLLDUULRUULLLULURRRLLULDLDUDLDLURUDUDULLDLLUUDRRDRLUURURURURDLURUUDLDRLUDDUUDULDULULLLDLDDULLULLDULRRDRULLURRRULLDDDULULURLRDURLLURUDDULLRUDLRURURRDRDUULDRUUDURDURDDLRDUUULDUUDRDURURDRRRURLLDDLLLURURULULUDLRDLDRDRURLRLULRDLU
UDLDURRULDRDDLDUULUDLDUULUURDDRUDRURRRUDRURLLDDRURLDLRDUUURDLLULURDDUDDDRRRURLLDLDLULRDULRLULDLUUDLLRLDLRUUULDDUURDLDDRRDLURLDUDDRURDRRURDURRRLUULURDDLRDLDRRRLDUDRLRLLRLDDUULDURUUULLLRRRRRRRDRRRDRLUULDLDDLULDRDUDLLUDRRUDRUUDULRLUURDDDDRRUUDLURULLLURDULUURDRDDURULRUDRRDLRDUUUUUDDDRDRDDRUDRDDDRLRUUDRDRDDDLUDRDRLDRDDRULURDRLDRUDUDRUULRLLUDRDRLLLLDUDRRLLURDLLLDRRUDDUDRLRLDUDRLURRUUULURDDRUURRLDRLRRRUUDLULDDDRDLDUUURLLUULDDRRUDLDDRUDUDUURURDDRDULLLLLULRRRDLRRRDDDLURDDDDLUULLLRDDURRRRLURRLDDLRUULULRDRDDDDLDUUUUUUDRRULUUUDD
UURDRRUDLURRDDDLUDLRDURUDURDLLLLRDLRLRDDRDRDUUULRDLLDLULULRDUDDRRUUDURULDLUDLRDRUDLDDULLLDDRDLLDULLLURLLRDDLDRDULRRDDULRDURLLRUDRLRRLUDURLDRDLDLRLLLURLRRURDLDURDLUDULRDULLLDRDDRDLDRDULUULURDRRRLDRRUULULLDDRRLDLRUURLRUURLURRLLULUUULRLLDDUDDLRLDUURURUDLRDLURRLLURUDLDLLUDDUULUUUDDDURDLRRDDDLDRUDRLRURUUDULDDLUUDDULLDDRRDDRRRUDUDUDLDLURLDRDLLLLDURDURLRLLLUUDLRRRRUDUDDLDLRUURRLRRLUURRLUDUDRRRRRRRLDUDDRUDDLUDLRDDDRLDUULDRDRRDLDRURDLDRULRLRLUDRDLRRUURUUUUDLDUUULLLRRRRRDLRRURDDLLLLUULDLLRULLUDLLDLLUDLRLRRLRURDDRRL
URDRDLLRDDDLLLDDLURLRURUURRRLUURURDURRLLUDURRLRLDLUURDLULRRDRUDDLULDLDRLDLRLRRLLLDDDUDDDLRURURRLLDRRRURUDLRDDLLDULDDLDRLUUUDRRRULDUULRDDDLRRLLURDDURLULRDUDURRLLDLLRLDUDDRRDDLRLLLDUDRLUURRLLDULRLDLUUUUUDULUDLULUDDUURRURLDLDRRLDLRRUDUDRRDLDUDDLULLDLLRDRURDRDRRLDDDDRDDRLLDDDLLUDRURLURDRRRRRUDDDUDUDDRDUUDRRUDUDRLULDDURULUURUUUURDRULRLRULLDDRRRUULRRRRURUDLDLRDLLDRLURLRUULLURDUDULRRURLRLLRRLLLURULRRRLDDUULLUUULRRDRULUUUUDRDRRDLRURLRLLRLRRRDRDRLDLUURUURULLDLULRRLRRDRULRRLLLDDURULLDLDLDLUUURDLDLUUDULRLLUDDRRDLLDLDLDURLUURRDDRRURDRLUDRLUUUDLDULDLUDRLDUDDLLRUDULLLLLDRRLLUULLUUURRDDUURDLLRDDLRLLU
LDUDRRDLUUDDRLLUUULURLDUDLUDLRLDRURLULRLLDDLRRUUUDDDDRDULDDUUDLRUULDRULLRDRUDDURLDUUURRUDUDRDRDURRDLURRRDRLDLRRRLLLRLURUURRDLLRDLDDLLRDUDDRDUULRULRRURLUDDUDDDUULLUURDULDULLLLRUUUDDRRRLDDDLDLRRDRDRDLUULRLULDRULDLRDRRUDULUDLLUDUULRDLRRUUDDLLDUDDRULURRLULDLDRRULDDRUUDDLURDLRDRLULRRLURRULDUURDLUDLLDRLDULLULDLLRDRDLLLUDLRULLRLDRDDDLDDDLRULDLULLRUUURRLLDUURRLRLDUUULDUURDURRULULRUUURULLLRULLURDDLDRLLRDULLUDLDRRRLLLLDUULRRLDURDURDULULDUURLDUDRLRURRDLUUULURRUDRUUUDRUR'''

testcase = '''ULL
              RRDDD
              LURDL
              UUUUD '''


class TestPasscode(unittest.TestCase):

    def test_up(self):
        self.assertEqual(up(5, 'U'), 2)
        self.assertEqual(up(7, 'U'), 4)
        self.assertEqual(up(9, 'U'), 6)
        self.assertEqual(up(1, 'U'), 1)
        self.assertEqual(up(2, 'U'), 2)
        self.assertEqual(up(3, 'U'), 3)

    def test_left(self):
        self.assertEqual(left(5, 'L'), 4)
        self.assertEqual(left(7, 'L'), 7)
        self.assertEqual(left(9, 'L'), 8)
        self.assertEqual(left(1, 'L'), 1)
        self.assertEqual(left(4, 'L'), 4)

    def test_down(self):
        self.assertEqual(down(1, 'D'), 4)
        self.assertEqual(down(2, 'D'), 5)
        self.assertEqual(down(5, 'D'), 8)
        self.assertEqual(down(7, 'D'), 7)
        self.assertEqual(down(9, 'D'), 9)

    def test_right(self):
        self.assertEqual(right(1, 'D'), 2)
        self.assertEqual(right(2, 'D'), 3)
        self.assertEqual(right(5, 'D'), 6)
        self.assertEqual(right(6, 'D'), 6)
        self.assertEqual(right(9, 'D'), 9)

    def test_multiple_letters(self):
        self.assertEqual(multiple_letters(5,'ULL'),1)
        self.assertEqual(multiple_letters(1, 'RRDDD'), 9)
        self.assertEqual(multiple_letters(9, 'LURDL'), 8)
        self.assertEqual(multiple_letters(8, 'UUUUD'), 5)
        

def up(current, letter):
    if current in [1, 2, 3]:
        return current
    else:
        return current - 3


def left(current, letter):
    if current in [1, 4, 7]:
        return current
    else:
        return current - 1


def down(current, letter):
    if current in [7, 8, 9]:
        return current
    else:
        return current + 3


def right(current, letter):
    if current in [3, 6, 9]:
        return current
    else:
        return current + 1


def multiple_letters(current,letter):
    split = list(letter)
    func = {
           'U':up,
           'L':left,
           'D':down,
           'R':right
        }        
    for char in split:
        next = func[char]
        current = next(current,char)
    return current


def return_code(current, letter): #TODO - create test
    split = list(letter)
    func = {
        'U': up,
        'L': left,
        'D': down,
        'R': right
    }
    code = list() 
    for char in split:
        next = func[char]
        current = next(current, char)
        code.append(current)
    return code

if __name__ == '__main__':
    unittest.main()
